{"version":3,"file":"static/js/76.83c9e43c.chunk.js","mappings":"uMACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA0E,kB,SCkE1E,GA/DaA,EAAAA,EAAAA,OAAK,YAAkB,IAAfC,EAAc,EAAdA,QAInB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACHR,IACLK,GAAa,GACbE,EAAS,MAETE,MAAM,GAAD,OAZU,+BAYV,kBAAsBT,EAAtB,4BAXS,mCAWT,oBACFU,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,OAElB,MAAM,IAAIC,MAAM,uBACjB,IACAJ,MAAK,YAAyB,IAAhBK,EAAe,EAArBC,KACPb,EAAUY,GACVV,GAAa,EACd,IACAY,OAAM,SAACX,GACND,GAAa,GACbE,EAASD,EACV,IACJ,GAAE,CAACN,IAEAM,GACK,yBAAMA,EAAMY,UAGjBd,GACK,yCAIP,8BACGF,EAAOiB,OAAS,IACf,eAAIC,UAAWC,EAAf,SACGnB,EAAOoB,KAAI,gBAAGC,EAAH,EAAGA,GAAkBC,EAArB,EAAOC,aAA0CC,EAAjD,EAAkCC,cAA6BC,EAA/D,EAA+DA,UAA/D,OACVJ,IACE,gBAAaJ,UAAWC,EAAxB,WACE,gBAAKD,UAAWC,EAAWQ,IAAG,UA1C1B,iDA0C0B,OAAiBL,GAAeM,IAAKJ,KACnE,4BACE,yCAAiBA,MACjB,kCAAUE,UAJLL,EAFD,OAerB,G","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"item\":\"Cast_item__a0CDL\",\"img\":\"Cast_img__-isbW\"};","import PropTypes from 'prop-types';\nimport { useState, useEffect, memo } from 'react';\nimport style from './Cast.module.css';\n\nconst Cast = memo(({ movieId }) => {\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = '1a27ac166727ac0de96a34161208f474';\n  const IMAGE_URL = 'https://image.tmdb.org/t/p/w138_and_h175_face';\n  const [actors, setActors] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    setError(null);\n\n    fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Failed to fetch data');\n      })\n      .then(({ cast: castData }) => {\n        setActors(castData);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n        setError(error);\n      });\n  }, [movieId]);\n\n  if (error) {\n    return <div>{error.message}</div>;\n  }\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      {actors.length > 0 && (\n        <ul className={style.list}>\n          {actors.map(({ id, profile_path: profilePath, original_name: originalName, character }) => (\n            profilePath && (\n              <li key={id} className={style.item}>\n                <img className={style.img} src={`${IMAGE_URL}${profilePath}`} alt={originalName} />\n                <div>\n                  <h3>Actor name: {originalName}</h3>\n                  <p>Role: {character}</p>\n                </div>\n              </li>\n            )\n          ))}\n        </ul>\n      )}\n    </>\n  );\n});\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;\n"],"names":["memo","movieId","useState","actors","setActors","isLoading","setIsLoading","error","setError","useEffect","fetch","then","response","ok","json","Error","castData","cast","catch","message","length","className","style","map","id","profilePath","profile_path","originalName","original_name","character","src","alt"],"sourceRoot":""}